class Solution {
public:
    int numRollsToTarget(int n, int k, int target) {
const int MOD = 1000000007;
if(n*k<target){return 0;}
    // Initialize a 2D vector for dynamic programming
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(target + 1, 0));

    // Base case: there is one way to get a sum of 0 (no dice rolled)
    dp[0][0] = 1;

    // Dynamic programming recurrence
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= target; ++j) {
            for (int x = 1; x <= std::min(j, k); ++x) {
                dp[i][j] = (dp[i][j] + dp[i - 1][j - x]) % MOD;
            }
        }
    }

    return dp[n][target];
    }
};
